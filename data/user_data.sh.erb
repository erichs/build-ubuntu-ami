#!/bin/bash -ex
# User data script

# Log output to the console, syslog, and /var/log/user-data.log
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

# Download and extract the clean image
image=/mnt/<%= image_name %>.img
imagedir=/mnt/<%= image_name %>
wget -qO- <%= image_url %> | tar xzf - -C /mnt

# The image is 1.4GB by default
# Add 4GB for good measure
dd if=/dev/zero bs=1024k count=4096 >> $image
e2fsck -p -f $image
resize2fs $image

# Mount the image
mkdir -p $imagedir
mount -o loop $image $imagedir

# Allow network access from chroot environment
# cp fails because the symlink reference doesn't exist. Create a backup for now.
if [[ ( -L $imagedir/etc/resolv.conf ) && ( ! -e $imagedir/etc/resolv.conf ) ]]; then
  mv $imagedir/etc/resolv.conf $imagedir/etc/resolv.conf.bak;
fi

cp /etc/resolv.conf $imagedir/etc/

# Upgrade and install packages on the target file system
# Chroot needs to mount proc/sys/dev to function properly
mount -t proc none $imagedir/proc/
mount -t sysfs none $imagedir/sys/
mount -o bind /dev $imagedir/dev/

# prevent daemons from starting during apt-get
cat <<EOF | tee $imagedir/usr/sbin/policy-rc.d > /dev/null
#!/bin/sh
exit 101
EOF

chmod 755 $imagedir/usr/sbin/policy-rc.d

# Chroot needs the lock dir for aptitude
mkdir -p $imagedir/run/lock

chroot $imagedir apt-get update
# Do a double-take with force install in case there are any unconfigured dependencies which would cause the script to fail...
chroot $imagedir apt-get install -f
chroot $imagedir apt-get clean
chroot $imagedir apt-get update
chroot $imagedir apt-get dist-upgrade -y

# ensure ubuntu user is available and sudo-capable in chroot env...
cp /etc/passwd $imagedir/etc/passwd
cp /etc/group $imagedir/etc/group
cp /etc/sudoers.d/90-cloud-init-users $imagedir/etc/sudoers.d/90-cloud-init-users
mkdir -p $imagedir/home/ubuntu
chmod 755 $imagedir/home/ubuntu
chown ubuntu:ubuntu $imagedir/home/ubuntu

# RUN CUSTOM USER SCRIPT
cat << 'CUSTOM_SCRIPT_EOF' > $imagedir/tmp/custom_user_script
<%= custom_user_script %>
CUSTOM_SCRIPT_EOF

chmod +x $imagedir/tmp/custom_user_script
#chroot $imagedir /usr/bin/sudo -u ubuntu /bin/bash -c /tmp/custom_user_script
chroot $imagedir /bin/bash -c /tmp/custom_user_script
# END CUSTOM USER SCRIPT

# Put resolv.conf symlink back in place
rm -f  $imagedir/etc/resolv.conf
if [ -L $imagedir/etc/resolv.conf.bak ]; then mv $imagedir/etc/resolv.conf.bak $imagedir/etc/resolv.conf; fi

# Clean up chroot environment
chroot $imagedir umount /proc

# Clean up policy-rc.d
rm -f $imagedir/usr/sbin/policy-rc.d

# Wait for EBS volume to be attached
dev=<%= ebs_device %>

# Device names changed in precise/sid.
if [ -e /dev/xvdi ]; then
    dev="/dev/xvdi"
fi

while [ ! -e $dev ]; do sleep 1; done

# Format and mount the EBS volume
yes | sudo mkfs.ext4 -L cloudimg-rootfs $dev
ebsimagedir=$imagedir-ebs
mkdir $ebsimagedir
mount $dev $ebsimagedir

# Copy file system from temporary rootdir to EBS volume
tar -cSf - -C $imagedir . | tar xvf - -C $ebsimagedir

# Unmount
umount -l $imagedir
umount -l $ebsimagedir

# Shutdown to signal success
shutdown -h now
